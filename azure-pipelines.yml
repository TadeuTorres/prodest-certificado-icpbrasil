trigger:
- master
- prerelease

variables:
  buildConfiguration: 'Release'
  Major: 0
  Minor: 1
  PatchForPreRelease: 0
  TypeForPreRelease: ''
  Versao: $[format('{0}.{1}', variables['Major'], variables['Minor'])]
  

stages:
- stage: PreparacaoStage
  jobs:
  - job: SetarShortGitHashJob
    displayName: Setar Short GitHash
    steps:
      - script: |
          set TempVar=$(Build.SourceVersion)
          set ShortVar=%TempVar:~0,8%
          echo '##vso[task.setvariable variable=ShortGitHash;isOutput=true]%ShortVar%
        name: SetarShortGitHashStep
  - job: SetarPatchForMain
    dependsOn: SetarShortGitHashJob
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    displayName: Setar Patch For Main
    variables:
       shortGitHash: $[dependencies.SetarShortGitHashJob.outputs['SetarShortGitHashStep.ShortGitHash']]
       patch: $[counter(variables['Versao'], 0)]
    steps:
      - script: |
          echo $(shortGitHash)
          echo $(patch)
          echo $(Versao)
          echo '##vso[task.setvariable variable=Patch;isOutput=true]$(patch)
        name: SetVersaoMasterStep
  - job: SetarPatchForPreRelease
    dependsOn: SetarShortGitHashJob
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/prerelease')
    displayName: Setar Patch For Release
    variables:
      versionNumber: $[counter(format('{0}.{1}.{2}', variables['Versao'], variables['PatchForPreRelease'],variables['TypeForPreRelease']), 0)]
      shortGitHash: $[dependencies.SetarShortGitHashJob.outputs['SetarShortGitHashStep.ShortGitHash']]
    steps:
      - script: |
          echo '##vso[task.setvariable variable=Type]alpha
        condition: eq(variables['TypeForPreRelease'], '')
      - script: |
          echo '##vso[task.setvariable variable=Type]$(TypeForPreRelease)
        condition: ne(variables['TypeForPreRelease'], '')
      - script: |
           echo type = $(Type)
           set TempVar=$(PatchForPreRelease)-$(Type)$(versionNumber)-$(shortGitHash)
           echo %TempVar%
           echo '##vso[task.setvariable variable=Patch;isOutput=true]%TempVar%
        name: SetVersaoReleaseStep
  - job: SetarVersaoAtual
    dependsOn:
    - SetarPatchForPreRelease
    - SetarPatchForMain
    condition: or(succeeded('SetarPatchForPreRelease'), succeeded('SetarPatchForMain'))
    displayName: Setar Versão Atual
    variables:
       PatchTempMain: $[dependencies.SetarPatchForMain.outputs['SetVersaoMasterStep.Patch']]
       PatchTempRelease: $[dependencies.SetarPatchForPreRelease.outputs['SetVersaoReleaseStep.Patch']]
    steps:
      - script: |
           echo $(Versao)
           set TempVar=$(Versao).$(PatchTempMain)$(PatchTempRelease)
           echo %TempVar%
           echo '##vso[task.setvariable variable=VersaoAtual;isOutput=true]%TempVar%
        name: SetarVersaoAtualStep

- stage: PackAndPushStage
  displayName: PackAndPushStage
  dependsOn: PreparacaoStage
  jobs:
  - job: PackAndPushJob
    variables:
        VersaoAtual: $[stageDependencies.PreparacaoStage.SetarVersaoAtual.outputs['SetarVersaoAtualStep.VersaoAtual']]
    steps:
      - task: DotNetCoreCLI@2
        inputs:
          command: 'custom'
          projects: '**/*.csproj'
          custom: 'pack'
          arguments: '--configuration $(buildConfiguration) -o $(Build.ArtifactStagingDirectory) -p:PackageVersion=$(VersaoAtual)'
        name: Pack
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'NugetCertificadoIcpBrasil'
        name: Push