resources:
  repositories:
  - repository: testes
    type: git
    name: DevopsTools/prodest-certificado-icpbrasil-testes

trigger:
- main
- prerelease
- develop

variables:
- group: SonarQube
- name: buildConfiguration
  value: 'Release'
- name: Major
  value: '0'
- name: Minor
  value: '1'
- name: PatchForPreRelease
  value: '0'
- name: TypeForPreRelease
  value: ''
- name: Versao
  value: $[format('{0}.{1}', variables['Major'], variables['Minor'])]
- name: disable.coverage.autogenerate
  value: 'true'

stages:
- stage: BuildStage
  jobs:
    - job: BuildSonar
      displayName: Build And Quality
      steps:
        - checkout: self
          path: s
        - checkout: testes
          path: testes
        - task: CopyFiles@2
          inputs:
            SourceFolder: '..\testes\ListaParaValidar\'
            Contents: '**'
            TargetFolder: 'Tests\UnitTests\Context\Certificados\ListaParaValidar\'
        - task: PowerShell@2
          displayName: dotnet-sonarscanner begin
          inputs:
            targetType: 'inline'
            script: |
              dotnet tool install --global dotnet-sonarscanner
              dotnet sonarscanner begin /k:"$(Build.Repository.Name)" /d:sonar.host.url="$(SonarUrl)" /d:sonar.login="$(SonarToken)" /d:sonar.scanner.metadataFilePath="$(System.DefaultWorkingDirectory)\sonar\$(Build.BuildNumber)\$(Build.Repository.Name)\sonarqube\TaskReport\report-task.txt" /d:sonar.cs.opencover.reportsPaths="$(System.DefaultWorkingDirectory)/**/coverage.opencover.xml" /d:sonar.verbose=true
        - task: PowerShell@2
          displayName: dotnet restore
          inputs:
            targetType: 'inline'
            script: |
              dotnet restore
        - task: PowerShell@2
          displayName: dotnet build
          inputs:
            targetType: 'inline'
            script: |
              dotnet build --configuration $(BuildConfiguration) --no-restore
        - task: PowerShell@2
          displayName: dotnet test
          inputs:
            targetType: 'inline'
            script: |
              dotnet test --configuration $(BuildConfiguration) --no-restore --no-build --results-directory TestResults --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        - task: PublishTestResults@2
          displayName: publish test results
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: '**/*.trx'
        - task: PowerShell@2
          displayName: report generator
          inputs:
            targetType: 'inline'
            script: |
              dotnet $env:USERPROFILE\.nuget\packages\reportgenerator\4.8.7\tools\netcoreapp3.0\ReportGenerator.dll "-reports:**/coverage.opencover.xml" "-targetdir:coverage/Cobertura" "-reporttypes:Cobertura;HtmlInline_AzurePipelines_Dark;"
        - task: PublishCodeCoverageResults@1
          displayName: publish code coverage
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/Cobertura/Cobertura.xml'
            reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/Cobertura'
        - task: PowerShell@2
          displayName: dotnet publish
          inputs:
            targetType: 'inline'
            script: |
              dotnet publish Prodest.Certificado.ICPBrasil\Prodest.Certificado.ICPBrasil.csproj --no-restore --no-build --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
        - task: PublishBuildArtifacts@1
          displayName: publish build artifacts
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        - task: PowerShell@2
          displayName: dotnet-sonarscanner end
          inputs:
            targetType: 'inline'
            script: 'dotnet sonarscanner end /d:sonar.login="$(SonarToken)"'

- stage: PreparacaoStage
  dependsOn: BuildStage
  condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),eq(variables['Build.SourceBranch'], 'refs/heads/prerelease'))
  jobs:
  - job: SetarShortGitHashJob
    displayName: Setar Short GitHash
    steps:
      - script: |
          set TempVar=$(Build.SourceVersion)
          set ShortVar=%TempVar:~0,8%
          echo '##vso[task.setvariable variable=ShortGitHash;isOutput=true]%ShortVar%
        name: SetarShortGitHashStep
  - job: SetarPatchForMain
    dependsOn: SetarShortGitHashJob
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    displayName: Setar Patch For Main
    variables:
       shortGitHash: $[dependencies.SetarShortGitHashJob.outputs['SetarShortGitHashStep.ShortGitHash']]
       patch: $[counter(variables['Versao'], 0)]
    steps:
      - script: |
          echo $(shortGitHash)
          echo $(patch)
          echo $(Versao)
          echo '##vso[task.setvariable variable=Patch;isOutput=true]$(patch)
        name: SetVersaoMainStep
  - job: SetarPatchForPreRelease
    dependsOn: SetarShortGitHashJob
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/prerelease')
    displayName: Setar Patch For Release
    variables:
      versionNumber: $[counter(format('{0}.{1}.{2}', variables['Versao'], variables['PatchForPreRelease'],variables['TypeForPreRelease']), 0)]
      shortGitHash: $[dependencies.SetarShortGitHashJob.outputs['SetarShortGitHashStep.ShortGitHash']]
    steps:
      - script: |
          echo '##vso[task.setvariable variable=Type]alpha
        condition: eq(variables['TypeForPreRelease'], '')
      - script: |
          echo '##vso[task.setvariable variable=Type]$(TypeForPreRelease)
        condition: ne(variables['TypeForPreRelease'], '')
      - script: |
           echo type = $(Type)
           set TempVar=$(PatchForPreRelease)-$(Type)$(versionNumber)-$(shortGitHash)
           echo %TempVar%
           echo '##vso[task.setvariable variable=Patch;isOutput=true]%TempVar%
        name: SetVersaoReleaseStep
  - job: SetarVersaoAtual
    dependsOn:
    - SetarPatchForPreRelease
    - SetarPatchForMain
    condition: or(succeeded('SetarPatchForPreRelease'), succeeded('SetarPatchForMain'))
    displayName: Setar Versão Atual
    variables:
       PatchTempMain: $[dependencies.SetarPatchForMain.outputs['SetVersaoMainStep.Patch']]
       PatchTempRelease: $[dependencies.SetarPatchForPreRelease.outputs['SetVersaoReleaseStep.Patch']]
    steps:
      - script: |
           echo $(Versao)
           set TempVar=$(Versao).$(PatchTempMain)$(PatchTempRelease)
           echo %TempVar%
           echo '##vso[task.setvariable variable=VersaoAtual;isOutput=true]%TempVar%
        name: SetarVersaoAtualStep

- stage: PackAndPushStage
  displayName: PackAndPushStage
  dependsOn: PreparacaoStage
  condition: or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),eq(variables['Build.SourceBranch'], 'refs/heads/prerelease'))
  jobs:
  - job: PackAndPushJob
    variables:
        VersaoAtual: $[stageDependencies.PreparacaoStage.SetarVersaoAtual.outputs['SetarVersaoAtualStep.VersaoAtual']]
    steps:
      - task: DotNetCoreCLI@2
        inputs:
          command: 'custom'
          projects: '**/*.csproj'
          custom: 'pack'
          arguments: '--configuration $(buildConfiguration) -o $(Build.ArtifactStagingDirectory) -p:PackageVersion=$(VersaoAtual)'
        name: Pack
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
          nuGetFeedType: 'external'
          publishFeedCredentials: 'NugetCertificadoIcpBrasil'
        name: Push      